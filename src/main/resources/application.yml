spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_SECRET_KEY}
            scope:
              - email
              - profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_SECRET_KEY}
            scope:
              - account_email
              - profile_nickname
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            client-name: Kakao
            client-authentication-method: client_secret_post
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  #logging
  logging:
    level:
      root: info
      '[org.springframework.web]': debug               # 웹 요청 처리
      '[org.hibernate.SQL]': debug                    # 실행되는 SQL 문
      '[org.hibernate.type.descriptor.sql]': trace    # 바인딩 파라미터까지 보고 싶을 때
      '[org.springframework.security]': debug         # 스프링 시큐리티 디버깅
      '[org.springframework.boot.autoconfigure]': debug # 자동 설정 확인
      '[com.zaxxer.hikari]': debug                    # 커넥션 풀 로깅
      '[org.springframework.data.redis]': debug       # Redis 작동 로그
      '[org.springframework.transaction]': trace      # 트랜잭션 관련 디버깅
      jdbc: off
      sqltiming: debug

  config:
    import: optional:file:.env.${spring.profiles.active}[.properties]
  profiles:
    active: local

  data:
    redis:
      host: localhost
      port: 6379

jwt:
  secret: ${JWT_SECRET}
  issuer: ${JWT_ISSUER}
  access-token-expire-time: 10800000 # 3시간
  refresh-token-expire-time: 86400000 # 1일

aes:
  key: ${ASE_KEY}

business:
  register:
    service:
      api: ${BUSINESS_REGISTER_API}
      key: ${BUSINESS_REGISTER_SERVICE_KEY}

#logging
logging:
  level:
    root: info
    '[org.springframework.web]': debug
    jdbc: off
    sqltiming: debug
    org:
      springframework:
        security: DEBUG

server:
  port: 8080

springdoc:
  swagger-ui:
    url: /v3/api-docs
    path: /swagger-ui.html
    groups-order: DESC
    tags-sorter: alpha
    operations-sorter: method
    disable-swagger-default-url: true
    display-request-duration: true
    defaultModelsExpandDepth: 2
    defaultModelExpandDepth: 2
  show-actuator: true
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  writer-with-default-pretty-printer: true
  model-and-view-allowed: true
  paths-to-match:
    - /api/**
    - /swagger-ui.html
  packages-to-scan: com.vueart.api.controller
  api-docs:
    groups:
      enabled: true
  cache:
    disabled: true

---
spring:
  application:
    name: vue-art
  config:
    activate:
      on-profile: local
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 10

  jpa:
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        storage_engine: innodb
        format_sql: true
        use_sql_comments: true
    show-sql: true
    generate-ddl: true
    hibernate:
      ddl-auto: update
    open-in-view: false

---
spring:
  application:
    name: vue-art
  config:
    activate:
      on-profile: dev
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 10
  jpa:
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        storage_engine: innodb
        format_sql: true
        use_sql_comments: true
    show-sql: true
    generate-ddl: true
    hibernate:
      ddl-auto: update
    open-in-view: false